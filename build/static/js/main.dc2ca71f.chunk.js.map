{"version":3,"sources":["services/persons.js","components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","name","number","post","id","delete","updatedPerson","put","Filter","searchName","setSearchName","value","onChange","event","target","PersonForm","newName","setNewName","newNumber","setNewNumber","addPerson","focusName","onSubmit","required","autoComplete","ref","type","Persons","persons","deletePerson","length","style","listStyle","padding","filter","person","toLowerCase","includes","map","onClick","Notification","message","setMessage","setType","useEffect","timer","setTimeout","clearTimeout","className","App","useState","setPersons","useRef","clearInput","current","focus","personService","preventDefault","existingPerson","find","window","confirm","catch","error","newPerson","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc2ca71f.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst baseUrl = \"/api/persons\";\r\n\r\nconst getAll = () => axios.get(baseUrl).then((response) => response.data);\r\n\r\nconst create = (name, number) =>\r\n    axios.post(baseUrl, { name, number }).then((response) => response.data);\r\n\r\nconst remove = (id) => axios.delete(`${baseUrl}/${id}`);\r\n\r\nconst update = (id, updatedPerson) =>\r\n    axios\r\n        .put(`${baseUrl}/${id}`, updatedPerson)\r\n        .then((response) => response.data);\r\n\r\nexport default { getAll, create, remove, update };\r\n","import React from \"react\";\r\n\r\nconst Filter = ({ searchName, setSearchName }) => {\r\n    return (\r\n        <div>\r\n            Search for name:{\" \"}\r\n            <input\r\n                value={searchName}\r\n                onChange={(event) => setSearchName(event.target.value)}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\n\r\nconst PersonForm = ({\r\n    newName,\r\n    setNewName,\r\n    newNumber,\r\n    setNewNumber,\r\n    addPerson,\r\n    focusName,\r\n}) => {\r\n    return (\r\n        <form onSubmit={addPerson}>\r\n            <div>\r\n                Name:{\" \"}\r\n                <input\r\n                    value={newName}\r\n                    onChange={(event) => setNewName(event.target.value)}\r\n                    required\r\n                    autoComplete=\"off\"\r\n                    ref={focusName}\r\n                />\r\n            </div>\r\n            <div>\r\n                Number:{\" \"}\r\n                <input\r\n                    value={newNumber}\r\n                    onChange={(event) => setNewNumber(event.target.value)}\r\n                    required\r\n                    autoComplete=\"off\"\r\n                />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">Add</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default PersonForm;\r\n","import React from \"react\";\r\n\r\nconst Persons = ({ persons, searchName, deletePerson }) => {\r\n    return persons.length ? (\r\n        <ul style={{ listStyle: \"none\", padding: 0 }}>\r\n            {persons\r\n                .filter((person) =>\r\n                    person.name.toLowerCase().includes(searchName.toLowerCase())\r\n                )\r\n                .map((person) => (\r\n                    <li key={person.name}>\r\n                        {person.name} {person.number} &nbsp;\r\n                        <button\r\n                            onClick={() => deletePerson(person.id, person.name)}\r\n                        >\r\n                            Delete\r\n                        </button>\r\n                    </li>\r\n                ))}\r\n        </ul>\r\n    ) : (\r\n        <p>Loading contacts...</p>\r\n    );\r\n};\r\n\r\nexport default Persons;\r\n","import React, { useEffect } from \"react\";\r\n\r\nconst Notification = ({ message, type, setMessage, setType }) => {\r\n    useEffect(() => {\r\n        if (message) {\r\n            const timer = setTimeout(() => {\r\n                setMessage(null);\r\n                setType(\"\");\r\n            }, 5000);\r\n            return () => clearTimeout(timer);\r\n        }\r\n    }, [message]);\r\n\r\n    return message ? <div className={type}>{message}</div> : null;\r\n};\r\n\r\nexport default Notification;\r\n","import React, { useState, useRef, useEffect } from \"react\";\nimport personService from \"./services/persons\";\nimport Filter from \"./components/Filter\";\nimport PersonForm from \"./components/PersonForm\";\nimport Persons from \"./components/Persons\";\nimport Notification from \"./components/Notification\";\nimport \"./index.css\";\n\nconst App = () => {\n    const [persons, setPersons] = useState([]);\n    const [newName, setNewName] = useState(\"\");\n    const [newNumber, setNewNumber] = useState(\"\");\n    const [searchName, setSearchName] = useState(\"\");\n    const [message, setMessage] = useState(null);\n    const [type, setType] = useState(\"\");\n\n    const focusName = useRef();\n\n    const clearInput = () => {\n        setNewName(\"\");\n        setNewNumber(\"\");\n        focusName.current.focus();\n    };\n\n    useEffect(() => {\n        personService.getAll().then(setPersons);\n    }, []);\n\n    const addPerson = (event) => {\n        event.preventDefault();\n\n        const existingPerson = persons.find(\n            (person) => person.name === newName\n        );\n\n        if (existingPerson) {\n            window.confirm(\n                `${newName} is already added to phonebook, replace the old number with a new one?`\n            ) &&\n                personService\n                    .update(existingPerson.id, { number: newNumber })\n                    .then((updatedPerson) => {\n                        setPersons(\n                            persons.map((person) =>\n                                person.id === updatedPerson.id\n                                    ? updatedPerson\n                                    : person\n                            )\n                        );\n\n                        setMessage(`Updated ${newName}'s number`);\n                        setType(\"info\");\n\n                        clearInput();\n                    })\n                    .catch((error) => {\n                        if (error.name === \"TypeError\") {\n                            setMessage(\n                                `Information of ${newName} has already been deleted`\n                            );\n                            setPersons(\n                                persons.filter(\n                                    (person) => person.id !== existingPerson.id\n                                )\n                            );\n                        } else {\n                            setMessage(error.response.data.error);\n                        }\n\n                        setType(\"error\");\n                    });\n        } else {\n            personService\n                .create(newName, newNumber)\n                .then((newPerson) => {\n                    setPersons(persons.concat(newPerson));\n                    setMessage(`Added ${newName}`);\n                    setType(\"info\");\n                    clearInput();\n                })\n                .catch((error) => {\n                    setMessage(error.response.data.error);\n                    setType(\"error\");\n                });\n        }\n    };\n\n    const deletePerson = (id, name) => {\n        if (window.confirm(`Delete ${name}?`)) {\n            personService.remove(id).then(() => {\n                setPersons(persons.filter((person) => person.id !== id));\n                setMessage(`Deleted ${name}`);\n                setType(\"info\");\n            });\n        }\n    };\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notification\n                message={message}\n                type={type}\n                setMessage={setMessage}\n                setType={setType}\n            />\n            <Filter searchName={searchName} setSearchName={setSearchName} />\n\n            <h3>Add a new</h3>\n            <PersonForm\n                newName={newName}\n                setNewName={setNewName}\n                newNumber={newNumber}\n                setNewNumber={setNewNumber}\n                addPerson={addPerson}\n                focusName={focusName}\n            />\n\n            <h3>Numbers</h3>\n            <Persons\n                persons={persons}\n                searchName={searchName}\n                deletePerson={deletePerson}\n            />\n        </div>\n    );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}